#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:nil p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Thoughts about reorganizing my projects, org-agenda files, and git repos
#+DATE: <2016-02-12 09:26:20 Friday>
#+AUTHOR: George M Jones
#+EMAIL: gmj@pobox.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.50.1 (Org mode 8.3.3)

Thoughts about reorganizing my projects, org-agenda files, and git repos.

* Problems
  - My config files files are scattered all over by emacs, git, etc.
  - I need to consistently organize my project files, agenda's etc
  - I use different but sometimes overlapping files (mostly configs)
    at work and at home
  - All these files have different sensitivity/visibility requirements
  - It all gets complicated, hard to understand and hard to manage.
* Goals
** Simplify the /organization/ of my configs and project files
** Simplify the  /management/ of my configs and project files
   - e.g. fewer git repos
   - This will allow me to, for instance, to install my environment
     (emacs/org) on a new machine, pull down a few git repos and go.
** Define an organization that works in multiple contexts (home, work..)
   - e.g. I want to be able to use this for different =~/.ssh=
     directories both at home and at work
** Restrict/Allow access as appropriate
   - e.g. "money" and "career" projects might have different
     visibility than, say, my emacs config project
** Archive Old material
** Enable migration of my projects
   - To different machines (cloud)
   - To re-installed local hardware
    + e.g. I want to get to the point that everything that matters is
      in git somewhere so the local machine can die, be re-installed
      or go way and it will not impact my work (at least in terms of
      .orgified projects.
** Treat people like people, not projects
* Methods
** Create one top-level directory per CONTEXT (home, work...)

   - CONTEXT :: a context is a place ("Home") or an association
        ("work") within which a group of projects, configs and files
        are relevant.

   #+begin_example
   ~/george/	# personal/things specific to me
   ~/home/	# things specific to home/family context
   ~/work/	# things specific to work context
   #+end_example

** Create one 2nd-level directory per SCOPE per CONTEXT (home/public, home/private)

   - SCOPE :: A SCOPE defines visibility within a context
   
   e.g.

   #+begin_example
   ~/home/public	# global visibility (maybe on github)
   ~/home/limited	# "need-to-know" visibility
   ~/home/private	# "not on your life" visibility

   ~/work/public	# global visibility (maybe on github)
   ~/work/COMPANYNAME   # company-wide visibility (maybe internal git repo)
   ~/work/limited	# "need-to-know" visibility
   ~/work/private 	# "not on your life" visibility
   #+end_example

*** Define rules for visibility of each LEVEL OF SENSITIVITY
    The rules may be context specific.  E.g. "public" for my "home"
    CONTEXT may mean "OK to publish on github", but "public" at work
    may mean "OK to publish on the internal company wiki visible to all
    employees"
**** Public visibility projects
     - Things that can be completely public, like most of my .emacs.d
     - This might include, e.g., my .emacs.d/ files or HOWTOs on home remodeling.
     - These are things intended to be potentially consumed by other people.
     - It may make sense to have multiple repos here (e.g. one for
       .emacs.d, another for home remodeling, another for forked open
       source projects)
**** Limited visibility projects
     - Things that do not NEED to be private, but make no sense to
       publish widely, e.g. configuration settings specific to my
       email, e.g. my uesrname, email server names and ports, etc.
**** Private visibility projects
     - Things that NEED to be private.  Secrets.  Keys. Etc
     - This would probably include things specific to people, family
       members, etc.
   

** Create one 3rd level directory for each ENTITY

   - ENTITY :: An ENTITY is a person, project, group, config, etc
        that needs it's own collection of files, projects, configs, etc.

   e.g.

   #+begin_example
   ~/home/public/.emacs.d		# my emacs configs
   ~/home/public/elisp			# my elisp configs
   ~/home/limited/configs		# my mail, IRC, blog configs (no secrets)
   ~/home/private/secrets		# keys, certificates, etc.
   ~/home/private/cat-in-the-hat	# A person around the house

   ~/work/limited/configs		# work-specific configs (mail, etc)
   ~/work/limited/project1		# something I'm doing at work
   #+end_example

** Pick git repository(s) appropriate to the level of sensitivity
   - e.g. public things on github, private and limited repos somewhere
     less public (e.g. git repos at work, personal git repos in
     directories or on remote servers, etc)

** Create a project-PROJECTNAME.org for each project
   This may or may not be in top level directory, e.g.

   #+begin_example
   ~/home/public/elisp/project-elisp.org
   ~/home/private/thing1/person-thing1.org # not project-thing1.org !!!
   #+end_example

** Add the {person,project}-PROJECTNAME.org to org-agenda-files
   #+begin_example
   C-c [ runs the command org-agenda-file-to-front (found in
   org-mode-map), which is an interactive Lisp closure in ‘org.el’.
   
   It is bound to C-c [, <menu-bar> <Org> <File List for Agenda>
   <Add/Move Current File to Front of List>.
   
   (org-agenda-file-to-front &optional TO-END)
   #+end_example

*** Keeping org-agenda-files out of ~/.emacs/init.el
      I want to keep private information out of init.el.
      org-agenda-file-to-front adds files there.  I want them in a
      separate file.

      I added this to init.el
      #+begin_example
      ; because junk I don't want to share in git keeps showing up here
      (setq custom-file "~/home/limited/.emacs.d/emacs-custom.el")
      (load custom-file)

      #+end_example

** Normally, use files /in situ/
   In the normal case, just use files with their paths as installed, e.g.,

   #+begin_example
   ~/home/private/family/thing1/person-thing1.org
   #+end_example

** Create symlinks where needed
*** Link whole directories
    In some cases, it makes sense to link whole directories, e.g.

    #+begin_example
    ~/.ssh -> ~/home/private/.ssh
    #+end_example

*** Link all files in a directory

    In some cases, it might make sense to link to specific files to a
    directory (e.g. $HOME)

    #+begin_example
    lrwxrwxrwx  1 ubuntu ubuntu        46 Feb  9 10:48 .gitconfig -> /home/ubuntu/george/public/dotfiles/.gitconfig
    lrwxrwxrwx  1 ubuntu ubuntu        43 Feb  9 10:48 .bashrc -> /home/ubuntu/george/public/dotfiles/.bashrc
   #+end_example


*** Last install wins/overwrites

    Certain links might need to be replaced in different contexts,
    likely by replacing the symlink

    #+begin_example
    lrwxrwxrwx  1 ubuntu ubuntu        46 Feb  9 10:48 .gitconfig -> /home/ubuntu/george/public/dotfiles/.gitconfig
    lrwxrwxrwx  1 ubuntu ubuntu        43 Feb  9 10:48 .bashrc -> /home/ubuntu/george/public/dotfiles/.bashrc
   #+end_example


    
*** Case not handled: differences in individual files

    Differences within individual files are a hard case.   Some
    options for dealing with this include:

    - maintain separate files
    - use #INCLUDE-like features
    - use source control feature branches

** TODO  Hack link2 and friends to facilitate the linking above

   
   See https://github.com/eludom/dotfiles/blob/master/bin/linkall

   #+begin_example
#
# symlink all files in an src directory to a target directory
#
# usage: link2 [options] srcDir [targetDir]
#     -v | --verbose	Echo command names
#     -d | --debug	Additional debugging output
#     -h | --help		This text
#     -n | --dry-run	Do not execute
#     -r | --remove 	Remove link/file if it exists
#
# targetDir is created (mkdir -p) if it does not exist.   Existing
# symlinks are replaced.
#

# Examples:
#
#  Link all files in /etc to ./etc, creating ~./etc if needed
#
#    $ linkall -v /etc
#  
#
#  Link all files in ~/git/public/dotfiles to $HOME, replacing existing links
#
#    $ linkall ~/git/public/dotfiles $HOME
#
   #+end_example

** [1/2] Think about how to handle symlinks and conflicts

   In the normal case:

   #+begin_example
  ~/.bashrc -> ~/home/private/.bashrc
  ~/.emacs.d -> ~/home/private/.emacs.d
   #+end_example

   And so forth.

   What about cases where I want to switch between
   configs/credentials, or mix?  Options would seem to be to switch
   out the symlinks.

*** DONE solution: last overwrite wins.
*** TODO not addressed: managing changes WITHIN  a file

    Options:

        - maintain separate files :: e.g. separate .bashrc files for
             different contexts (home, work)
        - #INCLUDE-like solution :: include/require/slurp-in context
             specific things from an external file
        - branching an merging :: Use git (or other source code
             control system) to branch and merge differences as
             software feature sets.

    This is starting to get way too complicated.	     
    
*** Special cases

   #+begin_example
   lrwxrwxrwx 1 ubuntu ubuntu        28 Feb  3 10:29 configs -> /home/ubuntu/limited/configs/
   lrwxrwxrwx 1 ubuntu ubuntu        40 Jan 30 10:36 elisp -> /home/ubuntu/public/elisp/
   lrwxrwxrwx 1 ubuntu ubuntu        40 Jan 30 10:36 private-projects -> /home/ubuntu/public/private/projects/
   lrwxrwxrwx 1 ubuntu ubuntu        27 Feb  7 09:29 family -> /home/ubuntu/private/family/
   #+end_example

* Side Effects
  - Enables time tracking on projects  
* Possible Issues/Open questions
* What this does not address
  - Archival of non-project related material such as photos, videos
    and music.
  - Archival of old word processing docs, spreadsheets, etc.
caa* Action Items
** DONE Think about renaming THIS file and categorizing it in the new system
** DONE Check this meta-project into github
** TODO Start re-organizing all my projects/git repos along these lines
